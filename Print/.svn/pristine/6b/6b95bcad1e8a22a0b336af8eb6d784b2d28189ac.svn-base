package com.vjiazhi.shuiyinwang.ui.adapter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import com.vjiazhi.yinji.R;
import com.vjiazhi.shuiyinwang.utils.BitmapUtil;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.media.ThumbnailUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class HorizontalOutListViewAdapter extends BaseAdapter {
	private List<String> mimgPath;
	private Context mContext;
	private LayoutInflater mInflater;
	Bitmap iconBitmap;
	public HashMap<String, String> selectMap = new HashMap();

	// private String[] imgPath;
	public HorizontalOutListViewAdapter(Context context, List<String> imgPath) {
		this.mContext = context;
		this.mimgPath = imgPath;
		initHashMap(imgPath.size());
		mInflater = (LayoutInflater) mContext
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);// LayoutInflater.from(mContext);
	}

	public void initHashMap(int lenth) {
		for (int i = 0; i < lenth; i++) {
			selectMap.put("" + i, "yes");
		}
	}

	@Override
	public int getCount() {
		return mimgPath.size() + 1;
	}

	@Override
	public Object getItem(int position) {
		return position;
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {

		final ViewHolder holder;
		if (convertView == null) {
			holder = new ViewHolder();
			convertView = mInflater.inflate(R.layout.horizontal_out_list_item,
					null);
			holder.mImage = (ImageView) convertView
					.findViewById(R.id.img_list_out_item);
			holder.mTitle = (TextView) convertView.findViewById(R.id.select);
			holder.out_img_layout = (RelativeLayout) convertView
					.findViewById(R.id.img_out_layout);
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}

		if (position == mimgPath.size()) {
			holder.out_img_layout.setVisibility(View.INVISIBLE);

		} else {
			// holder.mTitle.setText(mTitles[position]);
			holder.out_img_layout.setVisibility(View.VISIBLE);
			iconBitmap = getPropThumnail(mimgPath.get(position));
			holder.mImage.setImageBitmap(iconBitmap);
			if (selectMap.get("" + position).equalsIgnoreCase("yes")) {
				holder.mTitle.setVisibility(View.VISIBLE);
			} else {
				holder.mTitle.setVisibility(View.INVISIBLE);
			}

		}

		final int thePosition = position;
		holder.out_img_layout.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (selectMap.get("" + thePosition).equalsIgnoreCase("yes")) {
					selectMap.put("" + thePosition, "no");
					holder.mTitle.setVisibility(View.INVISIBLE);
				} else {
					selectMap.put("" + thePosition, "yes");
					holder.mTitle.setVisibility(View.VISIBLE);
				}
			}
		});

		return convertView;
	}
	
	public  ArrayList<String> getSelectedFilePathArrayList()
	{
		ArrayList<String> fileNames=new ArrayList<String>();
		for(int i=0;i<selectMap.size();i++)
		{
			if (selectMap.get("" + i).equalsIgnoreCase("yes")) {
				fileNames.add(mimgPath.get(i));
			}
		}
		return fileNames;
	}

	private static class ViewHolder {
		private TextView mTitle;
		private RelativeLayout out_img_layout;
		private ImageView mImage;
	}

	private Bitmap getPropThumnail(String path) {
		// Drawable d = mContext.getResources().getDrawable(id);

		Bitmap b = null;
		try {
			b = BitmapUtil.revitionImageSize(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// Bitmap bb = BitmapUtil.getRoundedCornerBitmap(b, 100);
		int w = mContext.getResources().getDimensionPixelOffset(
				R.dimen.thumnail_default_width);
		int h = mContext.getResources().getDimensionPixelSize(
				R.dimen.thumnail_default_height);

		Bitmap thumBitmap = ThumbnailUtils.extractThumbnail(b, w, h);

		return thumBitmap;
	}

	private Bitmap getPropThumnail(int id) {
		Drawable d = mContext.getResources().getDrawable(id);
		Bitmap b = BitmapUtil.drawableToBitmap(d);
		// Bitmap bb = BitmapUtil.getRoundedCornerBitmap(b, 100);
		int w = mContext.getResources().getDimensionPixelOffset(
				R.dimen.thumnail_default_width);
		int h = mContext.getResources().getDimensionPixelSize(
				R.dimen.thumnail_default_height);

		Bitmap thumBitmap = ThumbnailUtils.extractThumbnail(b, w, h);

		return thumBitmap;
	}
}